import jsPDF from 'jspdf';
import 'jspdf-autotable';

export const generateScanReport = (scanType, scanData, fileName) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  
  // Header
  doc.setFillColor(59, 130, 246); // Blue
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  // Logo and Title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text('CYsafe Security Report', 20, 25);
  
  // Scan Type
  doc.setFontSize(14);
  doc.text(`${scanType} Analysis`, 20, 35);
  
  // Reset text color
  doc.setTextColor(0, 0, 0);
  
  let yPosition = 60;
  
  // Executive Summary
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Executive Summary', 20, yPosition);
  yPosition += 10;
  
  // Risk Level Box
  const riskColor = getRiskColor(scanData.riskLevel);
  doc.setFillColor(...riskColor);
  doc.rect(20, yPosition, 60, 20, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text(`Risk: ${scanData.riskLevel?.toUpperCase() || 'UNKNOWN'}`, 25, yPosition + 12);
  
  // Score Box
  doc.setFillColor(100, 100, 100);
  doc.rect(90, yPosition, 60, 20, 'F');
  doc.text(`Score: ${scanData.score || 0}%`, 95, yPosition + 12);
  
  doc.setTextColor(0, 0, 0);
  yPosition += 35;
  
  // Scan Details
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Scan Details', 20, yPosition);
  yPosition += 15;
  
  // Generate content based on scan type
  switch (scanType) {
    case 'File Scanner':
      yPosition = addFileDetails(doc, scanData, yPosition);
      break;
    case 'URL Checker':
      yPosition = addUrlDetails(doc, scanData, yPosition);
      break;
    case 'Email Analyzer':
      yPosition = addEmailDetails(doc, scanData, yPosition);
      break;
    case 'APK Analyzer':
      yPosition = addApkDetails(doc, scanData, yPosition);
      break;
    case 'Password Checker':
      yPosition = addPasswordDetails(doc, scanData, yPosition);
      break;
  }
  
  // Footer
  const timestamp = new Date().toLocaleString();
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated by CYsafe on ${timestamp}`, 20, pageHeight - 20);
  doc.text('This report is confidential and for authorized use only.', 20, pageHeight - 10);
  
  // Save the PDF
  doc.save(fileName || `${scanType.toLowerCase().replace(' ', '_')}_report.pdf`);
};

const getRiskColor = (riskLevel) => {
  switch (riskLevel?.toLowerCase()) {
    case 'safe': return [34, 197, 94]; // Green
    case 'suspicious': return [251, 191, 36]; // Yellow
    case 'malicious': return [239, 68, 68]; // Red
    case 'phishing': return [249, 115, 22]; // Orange
    default: return [107, 114, 128]; // Gray
  }
};

const addFileDetails = (doc, data, yPos) => {
  const details = [
    ['File Name', data.fileName || 'N/A'],
    ['File Size', formatFileSize(data.fileSize) || 'N/A'],
    ['File Type', data.fileType || 'N/A'],
    ['SHA256 Hash', data.hashes?.sha256 || 'N/A'],
    ['Scan Date', new Date().toLocaleString()],
    ['Detections', `${data.results?.details?.virusTotal?.positives || 0}/${data.results?.details?.virusTotal?.total || 0}`]
  ];
  
  doc.autoTable({
    startY: yPos,
    head: [['Property', 'Value']],
    body: details,
    theme: 'grid',
    headStyles: { fillColor: [59, 130, 246] }
  });
  
  yPos = doc.lastAutoTable.finalY + 20;
  
  // Engine Results
  if (data.results?.engines?.length > 0) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Antivirus Engine Results', 20, yPos);
    yPos += 10;
    
    const engineData = data.results.engines.slice(0, 10).map(engine => [
      engine.name,
      engine.detected ? 'DETECTED' : 'CLEAN',
      engine.result || 'Clean'
    ]);
    
    doc.autoTable({
      startY: yPos,
      head: [['Engine', 'Status', 'Result']],
      body: engineData,
      theme: 'grid',
      headStyles: { fillColor: [59, 130, 246] }
    });
  }
  
  return doc.lastAutoTable?.finalY + 20 || yPos + 20;
};

const addUrlDetails = (doc, data, yPos) => {
  const details = [
    ['URL', data.target || 'N/A'],
    ['Domain', data.results?.details?.urlInfo?.domain || 'N/A'],
    ['Protocol', data.results?.details?.urlInfo?.protocol || 'N/A'],
    ['Scan Date', new Date().toLocaleString()],
    ['Total Detections', `${data.results?.details?.positives || 0}/${data.results?.details?.total || 0}`],
    ['Reputation', data.results?.details?.reputation || 'Unknown']
  ];
  
  doc.autoTable({
    startY: yPos,
    head: [['Property', 'Value']],
    body: details,
    theme: 'grid',
    headStyles: { fillColor: [59, 130, 246] }
  });
  
  yPos = doc.lastAutoTable.finalY + 20;
  
  // Threat Categories
  if (data.results?.details?.categories?.length > 0) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Threat Categories', 20, yPos);
    yPos += 10;
    
    const categoryData = data.results.details.categories.map(cat => [cat.toUpperCase()]);
    
    doc.autoTable({
      startY: yPos,
      head: [['Category']],
      body: categoryData,
      theme: 'grid',
      headStyles: { fillColor: [59, 130, 246] }
    });
  }
  
  return doc.lastAutoTable?.finalY + 20 || yPos + 20;
};

const addEmailDetails = (doc, data, yPos) => {
  const details = [
    ['From', data.details?.headers?.from || 'N/A'],
    ['Subject', data.details?.headers?.subject || 'N/A'],
    ['SPF Status', data.details?.headers?.spfPass ? 'PASS' : 'FAIL'],
    ['DKIM Status', data.details?.headers?.dkimPass ? 'PASS' : 'FAIL'],
    ['URLs Found', data.details?.urls?.length || 0],
    ['Attachments', data.details?.attachments?.length || 0],
    ['Phishing Indicators', data.details?.phishingIndicators || 0]
  ];
  
  doc.autoTable({
    startY: yPos,
    head: [['Property', 'Value']],
    body: details,
    theme: 'grid',
    headStyles: { fillColor: [59, 130, 246] }
  });
  
  yPos = doc.lastAutoTable.finalY + 20;
  
  // URLs Analysis
  if (data.details?.urls?.length > 0) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('URLs Analysis', 20, yPos);
    yPos += 10;
    
    const urlData = data.details.urls.map(url => [
      url.url.substring(0, 50) + (url.url.length > 50 ? '...' : ''),
      url.malicious ? 'MALICIOUS' : url.suspicious ? 'SUSPICIOUS' : 'SAFE'
    ]);
    
    doc.autoTable({
      startY: yPos,
      head: [['URL', 'Status']],
      body: urlData,
      theme: 'grid',
      headStyles: { fillColor: [59, 130, 246] }
    });
  }
  
  return doc.lastAutoTable?.finalY + 20 || yPos + 20;
};

const addApkDetails = (doc, data, yPos) => {
  const details = [
    ['Package Name', data.details?.apkInfo?.packageName || 'N/A'],
    ['Version', data.details?.apkInfo?.version || 'N/A'],
    ['Target SDK', data.details?.apkInfo?.targetSdk || 'N/A'],
    ['Total Permissions', data.details?.permissions?.length || 0],
    ['Dangerous Permissions', data.details?.dangerousPermissions?.length || 0],
    ['Malware Detected', data.details?.malwareDetected ? 'YES' : 'NO']
  ];
  
  doc.autoTable({
    startY: yPos,
    head: [['Property', 'Value']],
    body: details,
    theme: 'grid',
    headStyles: { fillColor: [59, 130, 246] }
  });
  
  yPos = doc.lastAutoTable.finalY + 20;
  
  // Dangerous Permissions
  if (data.details?.dangerousPermissions?.length > 0) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Dangerous Permissions', 20, yPos);
    yPos += 10;
    
    const permData = data.details.dangerousPermissions.slice(0, 10).map(perm => [perm]);
    
    doc.autoTable({
      startY: yPos,
      head: [['Permission']],
      body: permData,
      theme: 'grid',
      headStyles: { fillColor: [59, 130, 246] }
    });
  }
  
  return doc.lastAutoTable?.finalY + 20 || yPos + 20;
};

const addPasswordDetails = (doc, data, yPos) => {
  const details = [
    ['Strength', data.details?.strength?.toUpperCase() || 'N/A'],
    ['Length Check', data.details?.checks?.length ? 'PASS' : 'FAIL'],
    ['Uppercase Check', data.details?.checks?.uppercase ? 'PASS' : 'FAIL'],
    ['Lowercase Check', data.details?.checks?.lowercase ? 'PASS' : 'FAIL'],
    ['Numbers Check', data.details?.checks?.numbers ? 'PASS' : 'FAIL'],
    ['Symbols Check', data.details?.checks?.symbols ? 'PASS' : 'FAIL']
  ];
  
  doc.autoTable({
    startY: yPos,
    head: [['Check', 'Status']],
    body: details,
    theme: 'grid',
    headStyles: { fillColor: [59, 130, 246] }
  });
  
  yPos = doc.lastAutoTable.finalY + 20;
  
  // Suggestions
  if (data.details?.suggestions?.length > 0) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Improvement Suggestions', 20, yPos);
    yPos += 10;
    
    const suggestionData = data.details.suggestions.map((suggestion, index) => [
      index + 1,
      suggestion
    ]);
    
    doc.autoTable({
      startY: yPos,
      head: [['#', 'Suggestion']],
      body: suggestionData,
      theme: 'grid',
      headStyles: { fillColor: [59, 130, 246] }
    });
  }
  
  return doc.lastAutoTable?.finalY + 20 || yPos + 20;
};

const formatFileSize = (bytes) => {
  if (!bytes) return 'N/A';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};